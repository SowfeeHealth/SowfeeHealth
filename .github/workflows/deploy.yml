name: Deploy to AWS EC2

on:
  push:
    branches:
      - ziyue_branch

jobs:
  build:
    runs-on: ubuntu-latest
    environment: github_actions

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/django-app:latest
        context: .
        file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: github_actions

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Copy docker-compose file to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.prod.yaml"
        target: "~/app"

    - name: Create .env file on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          mkdir -p ~/app
          cat > ~/app/.env << EOL
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          EOL

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/app
          docker-compose -f docker-compose.prod.yaml down
          docker system prune -f
          docker pull ${{ secrets.DOCKER_USERNAME }}/django-app:latest
          
          # Start database first and wait for it
          docker-compose -f docker-compose.prod.yaml up -d db
          sleep 15
          
          # Run migrations with more verbosity
          docker-compose -f docker-compose.prod.yaml run --rm web python manage.py migrate auth
          docker-compose -f docker-compose.prod.yaml run --rm web python manage.py migrate surveys
          docker-compose -f docker-compose.prod.yaml run --rm web python manage.py migrate --run-syncdb
          
          # Start all services
          docker-compose -f docker-compose.prod.yaml up -d
          
          # Check logs
          docker-compose -f docker-compose.prod.yaml logs web

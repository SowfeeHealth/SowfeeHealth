services:
  db:
    image: mysql:8
    container_name: my-mysql-container
    restart: always
    env_file: .env
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/create_health_user.sql:/docker-entrypoint-initdb.d/create_health_user.sql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u health_user -p$MYSQL_HEALTH_USER_PASSWORD"]
      interval: 10s
      timeout: 8s
      retries: 8
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: always
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  web:
    image: ${DOCKER_USERNAME}/django-app:latest
    container_name: django-app
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - IS_PRODUCTION=true
    ports:
      - "8000:8000"
    working_dir: /app/backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
        bash -c "
        echo '=== Checking built static files ===' &&
        ls -la /app/backend/staticfiles/ &&
        echo '=== Copying to shared volume ===' &&
        cp -r /app/backend/staticfiles/* /shared_static/ &&
        echo '=== Files copied to shared volume ===' &&
        ls -la /shared_static/ &&
        echo '=== Starting Django ===' &&
        python manage.py migrate &&   
        python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(email='${ADMIN_EMAIL}').exists() or User.objects.create_superuser(email='${ADMIN_EMAIL}', password='${ADMIN_PASSWORD}')\" && 
        gunicorn core.wsgi:application --bind 0.0.0.0:8000
        "
    volumes:
      - static_volume:/shared_static

  celery:
    image: ${DOCKER_USERNAME}/django-app:latest
    container_name: celery-worker
    restart: on-failure
    command: celery -A core worker -l info
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - IS_PRODUCTION=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    working_dir: /app/backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "celery -A core inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  nginx:
    image: nginx:1.24
    container_name: nginx
    restart: on-failure
    volumes:
      - static_volume:/usr/share/nginx/html:ro
      - /home/ec2-user/app/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

volumes:
  mysql_data:
  static_volume:
  redis_data: